///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace report_zoomdata
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("eeaaeffa-d26e-4401-b6ab-113d35b0634e", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the report_zoomdataRepository repository.
        /// </summary>
        public static report_zoomdataRepository repo = report_zoomdataRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL' at 72;18.", repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAILInfo, new RecordItemIndex(0));
            repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL.Click("72;18");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'firdou' with focus on 'PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL'.", repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAILInfo, new RecordItemIndex(1));
            repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL.PressKeys("firdou");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 's.sayyed{LShiftKey down}@{LShiftKey up}Zensoftservices.com' with focus on 'PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL'.", repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAILInfo, new RecordItemIndex(2));
            repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollartxtEMAIL.PressKeys("s.sayyed{LShiftKey down}@{LShiftKey up}Zensoftservices.com");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollarbtnSubmitx' at 27;24.", repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollarbtnSubmitxInfo, new RecordItemIndex(3));
            repo.PricewaterhouseCoopersInternationalLim.Ctl00DollarphCenterDollarbtnSubmitx.Click("27;24");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPassword' at 60;14.", repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPasswordInfo, new RecordItemIndex(4));
            repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPassword.Click("60;14");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Pwc{LShiftKey down}@{LShiftKey up}123456' with focus on 'PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPassword'.", repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPasswordInfo, new RecordItemIndex(5));
            repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollartxtPassword.PressKeys("Pwc{LShiftKey down}@{LShiftKey up}123456");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollarbtnSubmit' at 27;15.", repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollarbtnSubmitInfo, new RecordItemIndex(6));
            repo.PricewaterhouseCoopersInternationalLim1.Ctl00DollarphCenterDollarbtnSubmit.Click("27;15");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Workbench.ScrollWrapper' at 4;4.", repo.Workbench.ScrollWrapperInfo, new RecordItemIndex(7));
            repo.Workbench.ScrollWrapper.Click(new Location(ScrollWrapper_Screenshot1, "4;4", ScrollWrapper_Screenshot1_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Workbench.AllowDeferredRenderingVisualVisualP.Path' at 4;4.", repo.Workbench.AllowDeferredRenderingVisualVisualP.PathInfo, new RecordItemIndex(8));
            repo.Workbench.AllowDeferredRenderingVisualVisualP.Path.Click(new Location(Path_Screenshot1, "4;4", Path_Screenshot1_Options));
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=71,Height=64}) on item 'Workbench.AllowDeferredRenderingVisualVisualP.Path1'.", repo.Workbench.AllowDeferredRenderingVisualVisualP.Path1Info, new RecordItemIndex(9));
            Validate.ContainsImage(repo.Workbench.AllowDeferredRenderingVisualVisualP.Path1Info, Path1_Screenshot1, Path1_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating ContainsImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=413,Height=183}) on item 'Workbench.AllowDeferredRenderingVisualVisualP.Rect'.", repo.Workbench.AllowDeferredRenderingVisualVisualP.RectInfo, new RecordItemIndex(10));
            Validate.ContainsImage(repo.Workbench.AllowDeferredRenderingVisualVisualP.RectInfo, Rect_Screenshot1, Rect_Screenshot1_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage ScrollWrapper_Screenshot1
        { get { return repo.Workbench.ScrollWrapperInfo.GetScreenshot1(new Rectangle(542, 36, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions ScrollWrapper_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage Path_Screenshot1
        { get { return repo.Workbench.AllowDeferredRenderingVisualVisualP.PathInfo.GetScreenshot1(new Rectangle(13, 22, 8, 8)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions Path_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage Path1_Screenshot1
        { get { return repo.Workbench.AllowDeferredRenderingVisualVisualP.Path1Info.GetScreenshot1(new Rectangle(0, 0, 71, 64)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions Path1_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        CompressedImage Rect_Screenshot1
        { get { return repo.Workbench.AllowDeferredRenderingVisualVisualP.RectInfo.GetScreenshot1(new Rectangle(0, 0, 413, 183)); } }

        /// <summary>
        /// DO NOT REFERENCE THIS CODE  - auto generated
        /// </summary>
        Imaging.FindOptions Rect_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

#endregion
    }
#pragma warning restore 0436
}
